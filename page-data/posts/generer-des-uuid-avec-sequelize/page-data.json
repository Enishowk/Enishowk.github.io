{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/generer-des-uuid-avec-sequelize","result":{"data":{"markdownRemark":{"id":"c0d6572f-1b29-529f-baed-7306f9df534a","html":"<p>Salut, ça faisait longtemps que je n’avais pas posté. Je vais essayer de prendre un rythme de publication un peu plus régulier.</p>\n<p>Petit post concernant un problème que j’ai rencontré hier avec <a href=\"http://docs.sequelizejs.com/variable/index.html#static-variable-DataTypes\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sequelize</a> et la gestion des UUID.</p>\n<p>En effet, la génération des ID peut être faite de manière automatique et en auto-increment - heureusement me direz-vous - cependant, lorsqu’il s’agit de générer des UUID, cela se complique.<br>\nSi vous déclarez votre table avec une colonne UUID, sans la spécifier dans votre model, vous allez avoir des erreurs du type : “Unknown column ‘id’ in ‘field list’“. Car par défaut, Sequelize cherche une colonne ID, même si vous lui spécifiez une colonne UUID en Primary Key etc. </p>\n<p>Pour régler ce problème, premièrement, dans votre fichier de migration <code class=\"language-text\">migrations/create-users.js</code>, il faut spécifier le bon DataType et le bon nom de colonne que vous souhaitez utiliser :</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">up</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">queryInterface<span class=\"token punctuation\">,</span> Sequelize</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    queryInterface<span class=\"token punctuation\">.</span><span class=\"token function\">createTable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Users\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      uuid<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        allowNull<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        primaryKey<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        type<span class=\"token operator\">:</span> Sequelize<span class=\"token punctuation\">.</span><span class=\"token constant\">UUID</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      username<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        allowNull<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        type<span class=\"token operator\">:</span> Sequelize<span class=\"token punctuation\">.</span><span class=\"token constant\">STRING</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      password<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        allowNull<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        type<span class=\"token operator\">:</span> Sequelize<span class=\"token punctuation\">.</span><span class=\"token constant\">STRING</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      createdAt<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        allowNull<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        type<span class=\"token operator\">:</span> Sequelize<span class=\"token punctuation\">.</span><span class=\"token constant\">DATE</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      updatedAt<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        allowNull<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        type<span class=\"token operator\">:</span> Sequelize<span class=\"token punctuation\">.</span><span class=\"token constant\">DATE</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">down</span><span class=\"token operator\">:</span> <span class=\"token parameter\">queryInterface</span> <span class=\"token operator\">=></span> queryInterface<span class=\"token punctuation\">.</span><span class=\"token function\">dropTable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Users\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ensuite, il faut modifier votre User Model. Habituellement, si vous utilisez des ID, vous n’avez pas besoin de rajouter la colonne “ID”. Avec les UUID, vous êtes obligés. Le fichier <code class=\"language-text\">models/users.js</code> doit être configuré comme ceci :  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">queryInterface<span class=\"token punctuation\">,</span> Sequelize</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> User <span class=\"token operator\">=</span> queryInterface<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"User\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      uuid<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> Sequelize<span class=\"token punctuation\">.</span><span class=\"token constant\">UUID</span><span class=\"token punctuation\">,</span>\n        primaryKey<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        defaultValue<span class=\"token operator\">:</span> Sequelize<span class=\"token punctuation\">.</span><span class=\"token constant\">UUIDV4</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      username<span class=\"token operator\">:</span> Sequelize<span class=\"token punctuation\">.</span><span class=\"token constant\">STRING</span><span class=\"token punctuation\">,</span>\n      password<span class=\"token operator\">:</span> Sequelize<span class=\"token punctuation\">.</span><span class=\"token constant\">STRING</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> User<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Cependant, il reste un problème lorsque l’on ajoute des datafixtures. En effet, Sequelize ne gère pas l’ajout dynamique des UUID, il faut donc ajouter la lib <a href=\"https://github.com/kelektiv/node-uuid\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">node-uuid</a> et modifier le fichier <code class=\"language-text\">seeders/demo-user.js</code> comme ceci par exemple :</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> uuidv4 <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"uuid/v4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> bcrypt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bcrypt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">up</span><span class=\"token operator\">:</span> <span class=\"token parameter\">queryInterface</span> <span class=\"token operator\">=></span>\n    queryInterface<span class=\"token punctuation\">.</span><span class=\"token function\">bulkInsert</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"Users\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          uuid<span class=\"token operator\">:</span> <span class=\"token function\">uuidv4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          username<span class=\"token operator\">:</span> <span class=\"token string\">\"user1\"</span><span class=\"token punctuation\">,</span>\n          password<span class=\"token operator\">:</span> bcrypt<span class=\"token punctuation\">.</span><span class=\"token function\">hashSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          updatedAt<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          createdAt<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">down</span><span class=\"token operator\">:</span> <span class=\"token parameter\">queryInterface</span> <span class=\"token operator\">=></span> queryInterface<span class=\"token punctuation\">.</span><span class=\"token function\">bulkDelete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Users\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>J’espère que cela vous aidera. Si vous avez des questions ou de meilleures façons de procéder, contactez-moi sur <a href=\"https://twitter.com/Enish__\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Twitter</a>. 🙂</p>","fields":{"slug":"/posts/generer-des-uuid-avec-sequelize","tagSlugs":["/tag/blog/","/tag/dev/","/tag/uuid/","/tag/sequelize/"]},"frontmatter":{"date":"2018-05-22","description":"Configurer la gestion des UUID avec l'ORM Sequelize.","tags":["Blog","Dev","UUID","Sequelize"],"title":"Générer des UUID avec Sequelize"}}},"pageContext":{"slug":"/posts/generer-des-uuid-avec-sequelize"}},"staticQueryHashes":["1307906156","251939775","401334301"]}